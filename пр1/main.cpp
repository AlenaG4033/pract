#include <stdio.h>
#include <stdlib.h>
#include <locale.h>>


int main() {
    system("chcp 65001");

    int size, even_count;//объявление перменных для хранение размера массива и кол-ва чётных чисел
    printf("Введите размер массива: ");
    scanf("%d", &size);//считывание значения размера массива из вывода и сохранение его в переменную size с
    // помощью функции scanf
    //проверка условия size <= 0. Если оно истинное, то выводится сообщение "Некоректный размер массива" и программа
    // завершается с кодом возврата 1
    if (size <= 0) {
        printf("Некорректный размер массива!\n");
        return 1;
    }

    //Выделение динамической памяти под исходный массив (malloc).
    //Размер выделяемой помяти вычисляется как size * sizeof(int).
    //Если выделение памяти не удалось (указатель arr равен NULL), то выводится сообщение об ошибке
    int* arr = static_cast<int*>(malloc(size * sizeof(int)));
    if (arr == NULL) {
        printf("Ошибка выделения памяти!\n");
        return 1;
    }
    //Цикл for для вывода элементов массива. Значение каждого элемента считывается с помощью функции scanf
    // и сохраняется в ячейку памяти arr + i
    printf("Введите элементы массива:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", arr + i);
    }
    //Инициализация переменной even_count с нулевым значением для подсчёта кол-ва чётных чисел
    even_count = 0;
    //Цикл for для прохода по истенному массиву.
    //Указатель prt инициализируется значением arr, условие ptr < arr + size проверяет, что указательне вышел за
    // пределы массива, и на каждой итерации указатель увеличивается на размер int
    //Внутри цикла проверяется, является ли элемент, на который указывает ptr, чётным числом.
    // Если да, то увевличивается переменная even_count
    for (int* ptr = arr; ptr < arr + size; ptr++) {
        if (*ptr % 2 == 0) {
            even_count++;
            //Выделение новой памяти под новый массив с помощью функции realloc. Размер выделяемой памяти
            //вычисляется как even_count * sizeof(int).
            //Если перераспределение памяти не удалось (указатель new_arr равен NULL), то выводится сообщение об ошибке
            
            //Строка int* new_arr = static_cast<int*>(realloc(arr, even_count * sizeof(int))) выполняет выделение новой памяти
            // под новый массив, который будет содержать только четные числа из исходного массива
            int* new_arr = static_cast<int*>(realloc(arr, even_count * sizeof(int)));
            if (new_arr == NULL) {
                printf("Ошибка перераспределения памяти!\n");
                return 1;
            }

            // Копирование четного числа в новый массив new_arr по индексу even_count - 1
            new_arr[even_count - 1] = *ptr;
        }
    }

    // Вывод результата
    printf("Массив четных чисел:\n");
    for (int i = 0; i < even_count; i++) {
        printf("%d ", arr[i]);
    }

    free(arr); // Освобождение памяти итогового массива arr с помощью функции free

    return 0;
}